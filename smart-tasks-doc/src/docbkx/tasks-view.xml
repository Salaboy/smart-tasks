<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" >
<chapter>
	<title>Task Support View</title>

	<section>
		<title>Task Support View
		</title>
		<para>
			In this section we will see in details how to generate
			interfaces using Smart Tasks Task Support UI Helper.
        </para>
	</section>
	<section>
		<title>Task Form configuration file</title>
		<example>
			<title>
				Task form Configuration
				</title>
			<programlisting language="Json"><xi:include
				href="extras/form.config.json" xmlns:xi="http://www.w3.org/2001/XInclude"
				parse="text" /></programlisting>
			<para>This shows a sample configuration for the task form view. Let's see
			the element it has:</para>
			<itemizedlist>
				<listitem><para>A List of profiles. Each profile has its own configuration. When getting a task form, a profile must be provided. If no profile matches, it will take "Default".</para></listitem>
				<listitem><para>A set of inputFields. Each inputField has the name and the expression to get the values. Possibilities of expressions are: #{task:name}, which gets information about the task, or #{in:0}, which will get the first input parameter (attachment)</para></listitem>
				<listitem><para>A set of outputFields. Eeach outputField has the name of the field, and maybe a default value.</para></listitem>
			</itemizedlist>
		</example>
	</section>
	<section>
		<title>Task operations configuration</title>
		<example>
			<title>
				Task operations Configuration
				</title>
			<programlisting language="Json"><xi:include
				href="extras/operations.config.json" xmlns:xi="http://www.w3.org/2001/XInclude"
				parse="text" /></programlisting>
			<para>We can configure the task operations per human task provider, as each one can 
			have its own defined states. Concepts behind this definitions are:</para>
			<itemizedlist>
				<listitem><para>Each configuration file must be named "provider_name".config.json,
				where the provider named is provided in the implementation of
				HumanTaskServiceOperation, the method getTaskOriginatorType</para></listitem>
				<listitem><para>Each node in the configuration has: The name of the origin
				 state and a list of transitions. Each transition 
				 has the action and destination state.</para></listitem>
				 <listitem><para>Each transition also has a methodMapping attribute. It refers to 
				 the method name in TaskOperations interface that will execute this action.</para></listitem>
			</itemizedlist>
		</example>
	</section>
</chapter>